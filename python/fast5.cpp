/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "../src/fast5.hpp"
        ], 
        "extra_compile_args": [
            "-std=c++11", 
            "-Wall", 
            "-Wextra", 
            "-Wpedantic", 
            "-DPACKAGE_VERSION=0.5.9", 
            "-isystem", 
            "/usr/include/hdf5/serial"
        ], 
        "include_dirs": [
            "../src"
        ], 
        "language": "c++", 
        "libraries": [
            "hdf5"
        ], 
        "library_dirs": [
            "/usr/lib/x86_64-linux-gnu/hdf5/serial"
        ], 
        "runtime_library_dirs": [
            "/usr/lib/x86_64-linux-gnu/hdf5/serial"
        ]
    }, 
    "module_name": "fast5"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__fast5
#define __PYX_HAVE_API__fast5
#include <stdint.h>
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <map>
#include <memory>
#include <string.h>
#include <string>
#include <vector>
#include "fast5.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "fast5.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_5fast5_File;

/* "fast5.pyx":195
 * __version__ = cpp_version
 * 
 * cdef class File:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[Cpp_File] thisptr
 * 
 */
struct __pyx_obj_5fast5_File {
  PyObject_HEAD
  std::unique_ptr<fast5::File>  thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Channel_Id_Params(struct fast5::Channel_Id_Params s);
/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Raw_Samples_Params(struct fast5::Raw_Samples_Params s);
/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int16_t(int16_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Events_Params(struct fast5::EventDetection_Events_Params s);
static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Event(struct fast5::EventDetection_Event s);
static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_Params(struct fast5::Basecall_Model_Params s);
static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_State(struct fast5::Basecall_Model_State s);
static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Events_Params(struct fast5::Basecall_Events_Params s);
static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Event(struct fast5::Basecall_Event s);
static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(struct fast5::Basecall_Alignment_Entry s);
/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'fast5' */
static PyTypeObject *__pyx_ptype_5fast5_File = 0;
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(std::map<std::string,std::string>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample(const std::vector<fast5::Raw_Int_Sample>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample(const std::vector<fast5::Raw_Sample>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event(const std::vector<struct fast5::EventDetection_Event>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State(const std::vector<struct fast5::Basecall_Model_State>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event(const std::vector<struct fast5::Basecall_Event>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(const std::vector<struct fast5::Basecall_Alignment_Entry>  &); /*proto*/
#define __Pyx_MODULE_NAME "fast5"
int __pyx_module_is_main_fast5 = 0;

/* Implementation of 'fast5' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_s[] = "s";
static const char __pyx_k_gr[] = "gr";
static const char __pyx_k_rn[] = "rn";
static const char __pyx_k_rw[] = "rw";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_p_A[] = "p_A";
static const char __pyx_k_p_C[] = "p_C";
static const char __pyx_k_p_G[] = "p_G";
static const char __pyx_k_p_T[] = "p_T";
static const char __pyx_k_var[] = "var";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_move[] = "move";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_stdv[] = "stdv";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_drift[] = "drift";
static const char __pyx_k_fast5[] = "fast5";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shift[] = "shift";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_trunc[] = "trunc";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_var_sd[] = "var_sd";
static const char __pyx_k_weight[] = "weight";
static const char __pyx_k_read_id[] = "read_id";
static const char __pyx_k_sd_mean[] = "sd_mean";
static const char __pyx_k_sd_stdv[] = "sd_stdv";
static const char __pyx_k_variant[] = "variant";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_duration[] = "duration";
static const char __pyx_k_scale_sd[] = "scale_sd";
static const char __pyx_k_file_name[] = "file_name";
static const char __pyx_k_start_mux[] = "start_mux";
static const char __pyx_k_level_mean[] = "level_mean";
static const char __pyx_k_level_stdv[] = "level_stdv";
static const char __pyx_k_p_mp_state[] = "p_mp_state";
static const char __pyx_k_start_time[] = "start_time";
static const char __pyx_k_read_number[] = "read_number";
static const char __pyx_k_abasic_found[] = "abasic_found";
static const char __pyx_k_digitisation[] = "digitisation";
static const char __pyx_k_scaling_used[] = "scaling_used";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_is_valid_file[] = "is_valid_file";
static const char __pyx_k_median_before[] = "median_before";
static const char __pyx_k_p_model_state[] = "p_model_state";
static const char __pyx_k_sampling_rate[] = "sampling_rate";
static const char __pyx_k_channel_number[] = "channel_number";
static const char __pyx_k_template_index[] = "template_index";
static const char __pyx_k_complement_index[] = "complement_index";
static const char __pyx_k_home_matei_code_fast5_cython_fa[] = "/home/matei/code/fast5/cython/fast5.pyx";
static PyObject *__pyx_n_s_abasic_found;
static PyObject *__pyx_n_s_channel_number;
static PyObject *__pyx_n_s_complement_index;
static PyObject *__pyx_n_s_digitisation;
static PyObject *__pyx_n_s_drift;
static PyObject *__pyx_n_s_duration;
static PyObject *__pyx_n_s_fast5;
static PyObject *__pyx_n_s_file_name;
static PyObject *__pyx_n_s_gr;
static PyObject *__pyx_kp_s_home_matei_code_fast5_cython_fa;
static PyObject *__pyx_n_s_is_valid_file;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_level_mean;
static PyObject *__pyx_n_s_level_stdv;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_median_before;
static PyObject *__pyx_n_s_move;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_n_s_p_A;
static PyObject *__pyx_n_s_p_C;
static PyObject *__pyx_n_s_p_G;
static PyObject *__pyx_n_s_p_T;
static PyObject *__pyx_n_s_p_model_state;
static PyObject *__pyx_n_s_p_mp_state;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_id;
static PyObject *__pyx_n_s_read_number;
static PyObject *__pyx_n_s_rn;
static PyObject *__pyx_n_s_rw;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_sampling_rate;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_scale_sd;
static PyObject *__pyx_n_s_scaling_used;
static PyObject *__pyx_n_s_sd_mean;
static PyObject *__pyx_n_s_sd_stdv;
static PyObject *__pyx_n_s_shift;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_mux;
static PyObject *__pyx_n_s_start_time;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_stdv;
static PyObject *__pyx_n_s_template_index;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_trunc;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_var_sd;
static PyObject *__pyx_n_s_variant;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_weight;
static int __pyx_pf_5fast5_4File___init__(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_rw); /* proto */
static PyObject *__pyx_pf_5fast5_4File_2is_open(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_4is_rw(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_6file_name(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_8open(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_rw); /* proto */
static PyObject *__pyx_pf_5fast5_4File_10create(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_trunc); /* proto */
static PyObject *__pyx_pf_5fast5_4File_12close(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_14is_valid_file(PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_5fast5_4File_16file_version(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_18have_channel_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_20get_channel_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_22have_tracking_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_24get_tracking_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_26have_sequences_params(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_28get_sequences_params(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_30get_raw_samples_read_name_list(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_32have_raw_samples(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_34get_raw_samples_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_36get_raw_int_samples(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_38get_raw_samples(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_40get_eventdetection_group_list(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_42have_eventdetection_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_44get_eventdetection_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_46get_eventdetection_read_name_list(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_48have_eventdetection_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_50get_eventdetection_events_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_52get_eventdetection_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr, PyObject *__pyx_v_rn); /* proto */
static PyObject *__pyx_pf_5fast5_4File_54get_basecall_group_list(struct __pyx_obj_5fast5_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5fast5_4File_56get_basecall_strand_group_list(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_5fast5_4File_58have_basecall_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_60have_basecall_strand_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_62get_basecall_1d_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_64get_basecall_eventdetection_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_66get_basecall_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_68get_basecall_log(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_70have_basecall_fastq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_72get_basecall_fastq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_74have_basecall_seq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_76get_basecall_seq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_78have_basecall_model(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_80get_basecall_model_file(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_82get_basecall_model_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_84get_basecall_model(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_86have_basecall_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_88get_basecall_events_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_90get_basecall_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_92have_basecall_alignment(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_pf_5fast5_4File_94get_basecall_alignment(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr); /* proto */
static PyObject *__pyx_tp_new_5fast5_File(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_codeobj__2;

/* "fast5.pyx":198
 *     cdef unique_ptr[Cpp_File] thisptr
 * 
 *     def __init__(self, name=None, rw=None):             # <<<<<<<<<<<<<<
 *         if name is None:
 *             self.thisptr.reset(new Cpp_File())
 */

/* Python wrapper */
static int __pyx_pw_5fast5_4File_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5fast5_4File_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_rw = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_rw,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rw);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 198, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_rw = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File___init__(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_name, __pyx_v_rw);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5fast5_4File___init__(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_rw) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  bool __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "fast5.pyx":199
 * 
 *     def __init__(self, name=None, rw=None):
 *         if name is None:             # <<<<<<<<<<<<<<
 *             self.thisptr.reset(new Cpp_File())
 *         elif rw is None:
 */
  __pyx_t_1 = (__pyx_v_name == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":200
 *     def __init__(self, name=None, rw=None):
 *         if name is None:
 *             self.thisptr.reset(new Cpp_File())             # <<<<<<<<<<<<<<
 *         elif rw is None:
 *             self.thisptr.reset(new Cpp_File(name))
 */
    __pyx_v_self->thisptr.reset(new fast5::File());

    /* "fast5.pyx":199
 * 
 *     def __init__(self, name=None, rw=None):
 *         if name is None:             # <<<<<<<<<<<<<<
 *             self.thisptr.reset(new Cpp_File())
 *         elif rw is None:
 */
    goto __pyx_L3;
  }

  /* "fast5.pyx":201
 *         if name is None:
 *             self.thisptr.reset(new Cpp_File())
 *         elif rw is None:             # <<<<<<<<<<<<<<
 *             self.thisptr.reset(new Cpp_File(name))
 *         else:
 */
  __pyx_t_2 = (__pyx_v_rw == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "fast5.pyx":202
 *             self.thisptr.reset(new Cpp_File())
 *         elif rw is None:
 *             self.thisptr.reset(new Cpp_File(name))             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.reset(new Cpp_File(name, rw))
 */
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __pyx_v_self->thisptr.reset(new fast5::File(__pyx_t_3));

    /* "fast5.pyx":201
 *         if name is None:
 *             self.thisptr.reset(new Cpp_File())
 *         elif rw is None:             # <<<<<<<<<<<<<<
 *             self.thisptr.reset(new Cpp_File(name))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "fast5.pyx":204
 *             self.thisptr.reset(new Cpp_File(name))
 *         else:
 *             self.thisptr.reset(new Cpp_File(name, rw))             # <<<<<<<<<<<<<<
 * 
 *     def is_open(self):
 */
  /*else*/ {
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_rw); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
    __pyx_v_self->thisptr.reset(new fast5::File(__pyx_t_3, __pyx_t_4));
  }
  __pyx_L3:;

  /* "fast5.pyx":198
 *     cdef unique_ptr[Cpp_File] thisptr
 * 
 *     def __init__(self, name=None, rw=None):             # <<<<<<<<<<<<<<
 *         if name is None:
 *             self.thisptr.reset(new Cpp_File())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("fast5.File.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":206
 *             self.thisptr.reset(new Cpp_File(name, rw))
 * 
 *     def is_open(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).is_open()
 *     def is_rw(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_3is_open(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_3is_open(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_open (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_2is_open(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_2is_open(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_open", 0);

  /* "fast5.pyx":207
 * 
 *     def is_open(self):
 *         return deref(self.thisptr).is_open()             # <<<<<<<<<<<<<<
 *     def is_rw(self):
 *         return deref(self.thisptr).is_rw()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).is_open()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":206
 *             self.thisptr.reset(new Cpp_File(name, rw))
 * 
 *     def is_open(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).is_open()
 *     def is_rw(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.is_open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":208
 *     def is_open(self):
 *         return deref(self.thisptr).is_open()
 *     def is_rw(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).is_rw()
 *     def file_name(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_5is_rw(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_5is_rw(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_rw (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_4is_rw(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_4is_rw(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_rw", 0);

  /* "fast5.pyx":209
 *         return deref(self.thisptr).is_open()
 *     def is_rw(self):
 *         return deref(self.thisptr).is_rw()             # <<<<<<<<<<<<<<
 *     def file_name(self):
 *         return deref(self.thisptr).file_name()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).is_rw()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":208
 *     def is_open(self):
 *         return deref(self.thisptr).is_open()
 *     def is_rw(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).is_rw()
 *     def file_name(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.is_rw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":210
 *     def is_rw(self):
 *         return deref(self.thisptr).is_rw()
 *     def file_name(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).file_name()
 *     def open(self, file_name, rw=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_7file_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_7file_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("file_name (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_6file_name(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_6file_name(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("file_name", 0);

  /* "fast5.pyx":211
 *         return deref(self.thisptr).is_rw()
 *     def file_name(self):
 *         return deref(self.thisptr).file_name()             # <<<<<<<<<<<<<<
 *     def open(self, file_name, rw=None):
 *         if rw is None:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).file_name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":210
 *     def is_rw(self):
 *         return deref(self.thisptr).is_rw()
 *     def file_name(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).file_name()
 *     def open(self, file_name, rw=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.file_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":212
 *     def file_name(self):
 *         return deref(self.thisptr).file_name()
 *     def open(self, file_name, rw=None):             # <<<<<<<<<<<<<<
 *         if rw is None:
 *             return deref(self.thisptr).open(file_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_9open(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_9open(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_name = 0;
  PyObject *__pyx_v_rw = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("open (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_name,&__pyx_n_s_rw,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rw);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "open") < 0)) __PYX_ERR(0, 212, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file_name = values[0];
    __pyx_v_rw = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("open", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_8open(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_file_name, __pyx_v_rw);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_8open(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_rw) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("open", 0);

  /* "fast5.pyx":213
 *         return deref(self.thisptr).file_name()
 *     def open(self, file_name, rw=None):
 *         if rw is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).open(file_name)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rw == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":214
 *     def open(self, file_name, rw=None):
 *         if rw is None:
 *             return deref(self.thisptr).open(file_name)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).open(file_name, rw)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L1_error)
    __pyx_t_4 = __Pyx_void_to_None((*__pyx_v_self->thisptr).open(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":213
 *         return deref(self.thisptr).file_name()
 *     def open(self, file_name, rw=None):
 *         if rw is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).open(file_name)
 *         else:
 */
  }

  /* "fast5.pyx":216
 *             return deref(self.thisptr).open(file_name)
 *         else:
 *             return deref(self.thisptr).open(file_name, rw)             # <<<<<<<<<<<<<<
 *     def create(self, file_name, trunc=None):
 *         if trunc is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_rw); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
    __pyx_t_4 = __Pyx_void_to_None((*__pyx_v_self->thisptr).open(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":212
 *     def file_name(self):
 *         return deref(self.thisptr).file_name()
 *     def open(self, file_name, rw=None):             # <<<<<<<<<<<<<<
 *         if rw is None:
 *             return deref(self.thisptr).open(file_name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.open", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":217
 *         else:
 *             return deref(self.thisptr).open(file_name, rw)
 *     def create(self, file_name, trunc=None):             # <<<<<<<<<<<<<<
 *         if trunc is None:
 *             return deref(self.thisptr).open(file_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_11create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_11create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_name = 0;
  PyObject *__pyx_v_trunc = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_name,&__pyx_n_s_trunc,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trunc);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create") < 0)) __PYX_ERR(0, 217, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file_name = values[0];
    __pyx_v_trunc = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_10create(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_file_name, __pyx_v_trunc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_10create(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_file_name, PyObject *__pyx_v_trunc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("create", 0);

  /* "fast5.pyx":218
 *             return deref(self.thisptr).open(file_name, rw)
 *     def create(self, file_name, trunc=None):
 *         if trunc is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).open(file_name)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_trunc == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":219
 *     def create(self, file_name, trunc=None):
 *         if trunc is None:
 *             return deref(self.thisptr).open(file_name)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).open(file_name, trunc)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L1_error)
    __pyx_t_4 = __Pyx_void_to_None((*__pyx_v_self->thisptr).open(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":218
 *             return deref(self.thisptr).open(file_name, rw)
 *     def create(self, file_name, trunc=None):
 *         if trunc is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).open(file_name)
 *         else:
 */
  }

  /* "fast5.pyx":221
 *             return deref(self.thisptr).open(file_name)
 *         else:
 *             return deref(self.thisptr).open(file_name, trunc)             # <<<<<<<<<<<<<<
 *     def close(self):
 *         return deref(self.thisptr).close()
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_trunc); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L1_error)
    __pyx_t_4 = __Pyx_void_to_None((*__pyx_v_self->thisptr).open(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":217
 *         else:
 *             return deref(self.thisptr).open(file_name, rw)
 *     def create(self, file_name, trunc=None):             # <<<<<<<<<<<<<<
 *         if trunc is None:
 *             return deref(self.thisptr).open(file_name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":222
 *         else:
 *             return deref(self.thisptr).open(file_name, trunc)
 *     def close(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).close()
 *     @staticmethod
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_13close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_13close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_12close(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_12close(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("close", 0);

  /* "fast5.pyx":223
 *             return deref(self.thisptr).open(file_name, trunc)
 *     def close(self):
 *         return deref(self.thisptr).close()             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def is_valid_file(s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None((*__pyx_v_self->thisptr).close()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":222
 *         else:
 *             return deref(self.thisptr).open(file_name, trunc)
 *     def close(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).close()
 *     @staticmethod
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":225
 *         return deref(self.thisptr).close()
 *     @staticmethod
 *     def is_valid_file(s):             # <<<<<<<<<<<<<<
 *         return File.is_valid_file(s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_15is_valid_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5fast5_4File_15is_valid_file = {"is_valid_file", (PyCFunction)__pyx_pw_5fast5_4File_15is_valid_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5fast5_4File_15is_valid_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_valid_file") < 0)) __PYX_ERR(0, 225, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_s = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_valid_file", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.is_valid_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_14is_valid_file(__pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_14is_valid_file(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("is_valid_file", 0);

  /* "fast5.pyx":226
 *     @staticmethod
 *     def is_valid_file(s):
 *         return File.is_valid_file(s)             # <<<<<<<<<<<<<<
 * 
 *     def file_version(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5fast5_File), __pyx_n_s_is_valid_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_s};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_s};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_s);
      __Pyx_GIVEREF(__pyx_v_s);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_s);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":225
 *         return deref(self.thisptr).close()
 *     @staticmethod
 *     def is_valid_file(s):             # <<<<<<<<<<<<<<
 *         return File.is_valid_file(s)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.is_valid_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":228
 *         return File.is_valid_file(s)
 * 
 *     def file_version(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).file_version()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_17file_version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_17file_version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("file_version (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_16file_version(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_16file_version(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("file_version", 0);

  /* "fast5.pyx":229
 * 
 *     def file_version(self):
 *         return deref(self.thisptr).file_version()             # <<<<<<<<<<<<<<
 * 
 *     def have_channel_id_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).file_version()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":228
 *         return File.is_valid_file(s)
 * 
 *     def file_version(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).file_version()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.file_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":231
 *         return deref(self.thisptr).file_version()
 * 
 *     def have_channel_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).have_channel_id_params()
 *     def get_channel_id_params(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_19have_channel_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_19have_channel_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_channel_id_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_18have_channel_id_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_18have_channel_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("have_channel_id_params", 0);

  /* "fast5.pyx":232
 * 
 *     def have_channel_id_params(self):
 *         return deref(self.thisptr).have_channel_id_params()             # <<<<<<<<<<<<<<
 *     def get_channel_id_params(self):
 *         return deref(self.thisptr).get_channel_id_params()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_channel_id_params()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":231
 *         return deref(self.thisptr).file_version()
 * 
 *     def have_channel_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).have_channel_id_params()
 *     def get_channel_id_params(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.have_channel_id_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":233
 *     def have_channel_id_params(self):
 *         return deref(self.thisptr).have_channel_id_params()
 *     def get_channel_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_channel_id_params()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_21get_channel_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_21get_channel_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_channel_id_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_20get_channel_id_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_20get_channel_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_channel_id_params", 0);

  /* "fast5.pyx":234
 *         return deref(self.thisptr).have_channel_id_params()
 *     def get_channel_id_params(self):
 *         return deref(self.thisptr).get_channel_id_params()             # <<<<<<<<<<<<<<
 * 
 *     def have_tracking_id_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert__to_py_struct__fast5_3a__3a_Channel_Id_Params((*__pyx_v_self->thisptr).get_channel_id_params()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":233
 *     def have_channel_id_params(self):
 *         return deref(self.thisptr).have_channel_id_params()
 *     def get_channel_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_channel_id_params()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.get_channel_id_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":236
 *         return deref(self.thisptr).get_channel_id_params()
 * 
 *     def have_tracking_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).have_tracking_id_params()
 *     def get_tracking_id_params(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_23have_tracking_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_23have_tracking_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_tracking_id_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_22have_tracking_id_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_22have_tracking_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("have_tracking_id_params", 0);

  /* "fast5.pyx":237
 * 
 *     def have_tracking_id_params(self):
 *         return deref(self.thisptr).have_tracking_id_params()             # <<<<<<<<<<<<<<
 *     def get_tracking_id_params(self):
 *         return deref(self.thisptr).get_tracking_id_params()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_tracking_id_params()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":236
 *         return deref(self.thisptr).get_channel_id_params()
 * 
 *     def have_tracking_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).have_tracking_id_params()
 *     def get_tracking_id_params(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.have_tracking_id_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":238
 *     def have_tracking_id_params(self):
 *         return deref(self.thisptr).have_tracking_id_params()
 *     def get_tracking_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_tracking_id_params()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_25get_tracking_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_25get_tracking_id_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tracking_id_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_24get_tracking_id_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_24get_tracking_id_params(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_tracking_id_params", 0);

  /* "fast5.pyx":239
 *         return deref(self.thisptr).have_tracking_id_params()
 *     def get_tracking_id_params(self):
 *         return deref(self.thisptr).get_tracking_id_params()             # <<<<<<<<<<<<<<
 * 
 *     def have_sequences_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string((*__pyx_v_self->thisptr).get_tracking_id_params()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":238
 *     def have_tracking_id_params(self):
 *         return deref(self.thisptr).have_tracking_id_params()
 *     def get_tracking_id_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_tracking_id_params()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.get_tracking_id_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":241
 *         return deref(self.thisptr).get_tracking_id_params()
 * 
 *     def have_sequences_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).have_sequences_params()
 *     def get_sequences_params(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_27have_sequences_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_27have_sequences_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_sequences_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_26have_sequences_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_26have_sequences_params(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("have_sequences_params", 0);

  /* "fast5.pyx":242
 * 
 *     def have_sequences_params(self):
 *         return deref(self.thisptr).have_sequences_params()             # <<<<<<<<<<<<<<
 *     def get_sequences_params(self):
 *         return deref(self.thisptr).get_sequences_params()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_sequences_params()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":241
 *         return deref(self.thisptr).get_tracking_id_params()
 * 
 *     def have_sequences_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).have_sequences_params()
 *     def get_sequences_params(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.have_sequences_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":243
 *     def have_sequences_params(self):
 *         return deref(self.thisptr).have_sequences_params()
 *     def get_sequences_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_sequences_params()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_29get_sequences_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_29get_sequences_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sequences_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_28get_sequences_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_28get_sequences_params(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_sequences_params", 0);

  /* "fast5.pyx":244
 *         return deref(self.thisptr).have_sequences_params()
 *     def get_sequences_params(self):
 *         return deref(self.thisptr).get_sequences_params()             # <<<<<<<<<<<<<<
 * 
 *     def get_raw_samples_read_name_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string((*__pyx_v_self->thisptr).get_sequences_params()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":243
 *     def have_sequences_params(self):
 *         return deref(self.thisptr).have_sequences_params()
 *     def get_sequences_params(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_sequences_params()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.get_sequences_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":246
 *         return deref(self.thisptr).get_sequences_params()
 * 
 *     def get_raw_samples_read_name_list(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_raw_samples_read_name_list()
 *     def have_raw_samples(self, rn=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_31get_raw_samples_read_name_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_31get_raw_samples_read_name_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_samples_read_name_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_30get_raw_samples_read_name_list(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_30get_raw_samples_read_name_list(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_raw_samples_read_name_list", 0);

  /* "fast5.pyx":247
 * 
 *     def get_raw_samples_read_name_list(self):
 *         return deref(self.thisptr).get_raw_samples_read_name_list()             # <<<<<<<<<<<<<<
 *     def have_raw_samples(self, rn=None):
 *         if rn is None:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string((*__pyx_v_self->thisptr).get_raw_samples_read_name_list()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":246
 *         return deref(self.thisptr).get_sequences_params()
 * 
 *     def get_raw_samples_read_name_list(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_raw_samples_read_name_list()
 *     def have_raw_samples(self, rn=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.get_raw_samples_read_name_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":248
 *     def get_raw_samples_read_name_list(self):
 *         return deref(self.thisptr).get_raw_samples_read_name_list()
 *     def have_raw_samples(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).have_raw_samples()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_33have_raw_samples(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_33have_raw_samples(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_raw_samples (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_raw_samples") < 0)) __PYX_ERR(0, 248, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_raw_samples", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 248, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_raw_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_32have_raw_samples(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_32have_raw_samples(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("have_raw_samples", 0);

  /* "fast5.pyx":249
 *         return deref(self.thisptr).get_raw_samples_read_name_list()
 *     def have_raw_samples(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_raw_samples()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rn == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":250
 *     def have_raw_samples(self, rn=None):
 *         if rn is None:
 *             return deref(self.thisptr).have_raw_samples()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_raw_samples(rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_raw_samples()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":249
 *         return deref(self.thisptr).get_raw_samples_read_name_list()
 *     def have_raw_samples(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_raw_samples()
 *         else:
 */
  }

  /* "fast5.pyx":252
 *             return deref(self.thisptr).have_raw_samples()
 *         else:
 *             return deref(self.thisptr).have_raw_samples(rn)             # <<<<<<<<<<<<<<
 *     def get_raw_samples_params(self, rn=None):
 *         if rn is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_raw_samples(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":248
 *     def get_raw_samples_read_name_list(self):
 *         return deref(self.thisptr).get_raw_samples_read_name_list()
 *     def have_raw_samples(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).have_raw_samples()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.have_raw_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":253
 *         else:
 *             return deref(self.thisptr).have_raw_samples(rn)
 *     def get_raw_samples_params(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_samples_params()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_35get_raw_samples_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_35get_raw_samples_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_samples_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_raw_samples_params") < 0)) __PYX_ERR(0, 253, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_raw_samples_params", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_raw_samples_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_34get_raw_samples_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_34get_raw_samples_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_raw_samples_params", 0);

  /* "fast5.pyx":254
 *             return deref(self.thisptr).have_raw_samples(rn)
 *     def get_raw_samples_params(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_raw_samples_params()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rn == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":255
 *     def get_raw_samples_params(self, rn=None):
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_samples_params()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_raw_samples_params(rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert__to_py_struct__fast5_3a__3a_Raw_Samples_Params((*__pyx_v_self->thisptr).get_raw_samples_params()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":254
 *             return deref(self.thisptr).have_raw_samples(rn)
 *     def get_raw_samples_params(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_raw_samples_params()
 *         else:
 */
  }

  /* "fast5.pyx":257
 *             return deref(self.thisptr).get_raw_samples_params()
 *         else:
 *             return deref(self.thisptr).get_raw_samples_params(rn)             # <<<<<<<<<<<<<<
 *     def get_raw_int_samples(self, rn=None):
 *         if rn is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert__to_py_struct__fast5_3a__3a_Raw_Samples_Params((*__pyx_v_self->thisptr).get_raw_samples_params(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":253
 *         else:
 *             return deref(self.thisptr).have_raw_samples(rn)
 *     def get_raw_samples_params(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_samples_params()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_raw_samples_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":258
 *         else:
 *             return deref(self.thisptr).get_raw_samples_params(rn)
 *     def get_raw_int_samples(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_int_samples()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_37get_raw_int_samples(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_37get_raw_int_samples(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_int_samples (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_raw_int_samples") < 0)) __PYX_ERR(0, 258, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_raw_int_samples", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 258, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_raw_int_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_36get_raw_int_samples(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_36get_raw_int_samples(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_raw_int_samples", 0);

  /* "fast5.pyx":259
 *             return deref(self.thisptr).get_raw_samples_params(rn)
 *     def get_raw_int_samples(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_raw_int_samples()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rn == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":260
 *     def get_raw_int_samples(self, rn=None):
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_int_samples()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_raw_int_samples(rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample((*__pyx_v_self->thisptr).get_raw_int_samples()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":259
 *             return deref(self.thisptr).get_raw_samples_params(rn)
 *     def get_raw_int_samples(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_raw_int_samples()
 *         else:
 */
  }

  /* "fast5.pyx":262
 *             return deref(self.thisptr).get_raw_int_samples()
 *         else:
 *             return deref(self.thisptr).get_raw_int_samples(rn)             # <<<<<<<<<<<<<<
 *     def get_raw_samples(self, rn=None):
 *         if rn is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample((*__pyx_v_self->thisptr).get_raw_int_samples(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":258
 *         else:
 *             return deref(self.thisptr).get_raw_samples_params(rn)
 *     def get_raw_int_samples(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_int_samples()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_raw_int_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":263
 *         else:
 *             return deref(self.thisptr).get_raw_int_samples(rn)
 *     def get_raw_samples(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_samples()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_39get_raw_samples(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_39get_raw_samples(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_raw_samples (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rn,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_raw_samples") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_raw_samples", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_raw_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_38get_raw_samples(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_38get_raw_samples(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_raw_samples", 0);

  /* "fast5.pyx":264
 *             return deref(self.thisptr).get_raw_int_samples(rn)
 *     def get_raw_samples(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_raw_samples()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_rn == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":265
 *     def get_raw_samples(self, rn=None):
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_samples()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_raw_samples(rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample((*__pyx_v_self->thisptr).get_raw_samples()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":264
 *             return deref(self.thisptr).get_raw_int_samples(rn)
 *     def get_raw_samples(self, rn=None):
 *         if rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_raw_samples()
 *         else:
 */
  }

  /* "fast5.pyx":267
 *             return deref(self.thisptr).get_raw_samples()
 *         else:
 *             return deref(self.thisptr).get_raw_samples(rn)             # <<<<<<<<<<<<<<
 * 
 *     def get_eventdetection_group_list(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample((*__pyx_v_self->thisptr).get_raw_samples(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":263
 *         else:
 *             return deref(self.thisptr).get_raw_int_samples(rn)
 *     def get_raw_samples(self, rn=None):             # <<<<<<<<<<<<<<
 *         if rn is None:
 *             return deref(self.thisptr).get_raw_samples()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_raw_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":269
 *             return deref(self.thisptr).get_raw_samples(rn)
 * 
 *     def get_eventdetection_group_list(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_eventdetection_group_list()
 *     def have_eventdetection_group(self, gr=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_41get_eventdetection_group_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_41get_eventdetection_group_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_eventdetection_group_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_40get_eventdetection_group_list(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_40get_eventdetection_group_list(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_eventdetection_group_list", 0);

  /* "fast5.pyx":270
 * 
 *     def get_eventdetection_group_list(self):
 *         return deref(self.thisptr).get_eventdetection_group_list()             # <<<<<<<<<<<<<<
 *     def have_eventdetection_group(self, gr=None):
 *         if gr is None:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string((*__pyx_v_self->thisptr).get_eventdetection_group_list()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":269
 *             return deref(self.thisptr).get_raw_samples(rn)
 * 
 *     def get_eventdetection_group_list(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_eventdetection_group_list()
 *     def have_eventdetection_group(self, gr=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.get_eventdetection_group_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":271
 *     def get_eventdetection_group_list(self):
 *         return deref(self.thisptr).get_eventdetection_group_list()
 *     def have_eventdetection_group(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_group()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_43have_eventdetection_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_43have_eventdetection_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_eventdetection_group (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_eventdetection_group") < 0)) __PYX_ERR(0, 271, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_eventdetection_group", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_eventdetection_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_42have_eventdetection_group(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_42have_eventdetection_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("have_eventdetection_group", 0);

  /* "fast5.pyx":272
 *         return deref(self.thisptr).get_eventdetection_group_list()
 *     def have_eventdetection_group(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_eventdetection_group()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":273
 *     def have_eventdetection_group(self, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_group()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_eventdetection_group(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_eventdetection_group()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":272
 *         return deref(self.thisptr).get_eventdetection_group_list()
 *     def have_eventdetection_group(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_eventdetection_group()
 *         else:
 */
  }

  /* "fast5.pyx":275
 *             return deref(self.thisptr).have_eventdetection_group()
 *         else:
 *             return deref(self.thisptr).have_eventdetection_group(gr)             # <<<<<<<<<<<<<<
 *     def get_eventdetection_params(self, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_eventdetection_group(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":271
 *     def get_eventdetection_group_list(self):
 *         return deref(self.thisptr).get_eventdetection_group_list()
 *     def have_eventdetection_group(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_group()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.have_eventdetection_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":276
 *         else:
 *             return deref(self.thisptr).have_eventdetection_group(gr)
 *     def get_eventdetection_params(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_params()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_45get_eventdetection_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_45get_eventdetection_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_eventdetection_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_eventdetection_params") < 0)) __PYX_ERR(0, 276, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_eventdetection_params", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_eventdetection_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_44get_eventdetection_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_44get_eventdetection_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_eventdetection_params", 0);

  /* "fast5.pyx":277
 *             return deref(self.thisptr).have_eventdetection_group(gr)
 *     def get_eventdetection_params(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_params()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":278
 *     def get_eventdetection_params(self, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_params()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_eventdetection_params(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string((*__pyx_v_self->thisptr).get_eventdetection_params()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":277
 *             return deref(self.thisptr).have_eventdetection_group(gr)
 *     def get_eventdetection_params(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_params()
 *         else:
 */
  }

  /* "fast5.pyx":280
 *             return deref(self.thisptr).get_eventdetection_params()
 *         else:
 *             return deref(self.thisptr).get_eventdetection_params(gr)             # <<<<<<<<<<<<<<
 *     def get_eventdetection_read_name_list(self, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string((*__pyx_v_self->thisptr).get_eventdetection_params(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":276
 *         else:
 *             return deref(self.thisptr).have_eventdetection_group(gr)
 *     def get_eventdetection_params(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_params()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_eventdetection_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":281
 *         else:
 *             return deref(self.thisptr).get_eventdetection_params(gr)
 *     def get_eventdetection_read_name_list(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_read_name_list()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_47get_eventdetection_read_name_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_47get_eventdetection_read_name_list(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_eventdetection_read_name_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_eventdetection_read_name_list") < 0)) __PYX_ERR(0, 281, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_eventdetection_read_name_list", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_eventdetection_read_name_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_46get_eventdetection_read_name_list(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_46get_eventdetection_read_name_list(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_eventdetection_read_name_list", 0);

  /* "fast5.pyx":282
 *             return deref(self.thisptr).get_eventdetection_params(gr)
 *     def get_eventdetection_read_name_list(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_read_name_list()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":283
 *     def get_eventdetection_read_name_list(self, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_read_name_list()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_eventdetection_read_name_list(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string((*__pyx_v_self->thisptr).get_eventdetection_read_name_list()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":282
 *             return deref(self.thisptr).get_eventdetection_params(gr)
 *     def get_eventdetection_read_name_list(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_read_name_list()
 *         else:
 */
  }

  /* "fast5.pyx":285
 *             return deref(self.thisptr).get_eventdetection_read_name_list()
 *         else:
 *             return deref(self.thisptr).get_eventdetection_read_name_list(gr)             # <<<<<<<<<<<<<<
 *     def have_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 285, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string((*__pyx_v_self->thisptr).get_eventdetection_read_name_list(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":281
 *         else:
 *             return deref(self.thisptr).get_eventdetection_params(gr)
 *     def get_eventdetection_read_name_list(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_read_name_list()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_eventdetection_read_name_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":286
 *         else:
 *             return deref(self.thisptr).get_eventdetection_read_name_list(gr)
 *     def have_eventdetection_events(self, gr=None, rn=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_events()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_49have_eventdetection_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_49have_eventdetection_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_eventdetection_events (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,&__pyx_n_s_rn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_eventdetection_events") < 0)) __PYX_ERR(0, 286, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
    __pyx_v_rn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_eventdetection_events", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_eventdetection_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_48have_eventdetection_events(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr, __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_48have_eventdetection_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("have_eventdetection_events", 0);

  /* "fast5.pyx":287
 *             return deref(self.thisptr).get_eventdetection_read_name_list(gr)
 *     def have_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_eventdetection_events()
 *         elif rn is None:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":288
 *     def have_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_events()             # <<<<<<<<<<<<<<
 *         elif rn is None:
 *             return deref(self.thisptr).have_eventdetection_events(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_eventdetection_events()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":287
 *             return deref(self.thisptr).get_eventdetection_read_name_list(gr)
 *     def have_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_eventdetection_events()
 *         elif rn is None:
 */
  }

  /* "fast5.pyx":289
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_events()
 *         elif rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_eventdetection_events(gr)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_rn == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "fast5.pyx":290
 *             return deref(self.thisptr).have_eventdetection_events()
 *         elif rn is None:
 *             return deref(self.thisptr).have_eventdetection_events(gr)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_eventdetection_events(gr, rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_eventdetection_events(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":289
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_events()
 *         elif rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_eventdetection_events(gr)
 *         else:
 */
  }

  /* "fast5.pyx":292
 *             return deref(self.thisptr).have_eventdetection_events(gr)
 *         else:
 *             return deref(self.thisptr).have_eventdetection_events(gr, rn)             # <<<<<<<<<<<<<<
 *     def get_eventdetection_events_params(self, gr=None, rn=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_eventdetection_events(__pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":286
 *         else:
 *             return deref(self.thisptr).get_eventdetection_read_name_list(gr)
 *     def have_eventdetection_events(self, gr=None, rn=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_eventdetection_events()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.have_eventdetection_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":293
 *         else:
 *             return deref(self.thisptr).have_eventdetection_events(gr, rn)
 *     def get_eventdetection_events_params(self, gr=None, rn=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events_params()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_51get_eventdetection_events_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_51get_eventdetection_events_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_eventdetection_events_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,&__pyx_n_s_rn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_eventdetection_events_params") < 0)) __PYX_ERR(0, 293, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
    __pyx_v_rn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_eventdetection_events_params", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 293, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_eventdetection_events_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_50get_eventdetection_events_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr, __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_50get_eventdetection_events_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_eventdetection_events_params", 0);

  /* "fast5.pyx":294
 *             return deref(self.thisptr).have_eventdetection_events(gr, rn)
 *     def get_eventdetection_events_params(self, gr=None, rn=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events_params()
 *         elif rn is None:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":295
 *     def get_eventdetection_events_params(self, gr=None, rn=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events_params()             # <<<<<<<<<<<<<<
 *         elif rn is None:
 *             return deref(self.thisptr).get_eventdetection_events_params(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Events_Params((*__pyx_v_self->thisptr).get_eventdetection_events_params()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":294
 *             return deref(self.thisptr).have_eventdetection_events(gr, rn)
 *     def get_eventdetection_events_params(self, gr=None, rn=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events_params()
 *         elif rn is None:
 */
  }

  /* "fast5.pyx":296
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events_params()
 *         elif rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events_params(gr)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_rn == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "fast5.pyx":297
 *             return deref(self.thisptr).get_eventdetection_events_params()
 *         elif rn is None:
 *             return deref(self.thisptr).get_eventdetection_events_params(gr)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_eventdetection_events_params(gr, rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Events_Params((*__pyx_v_self->thisptr).get_eventdetection_events_params(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":296
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events_params()
 *         elif rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events_params(gr)
 *         else:
 */
  }

  /* "fast5.pyx":299
 *             return deref(self.thisptr).get_eventdetection_events_params(gr)
 *         else:
 *             return deref(self.thisptr).get_eventdetection_events_params(gr, rn)             # <<<<<<<<<<<<<<
 *     def get_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Events_Params((*__pyx_v_self->thisptr).get_eventdetection_events_params(__pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":293
 *         else:
 *             return deref(self.thisptr).have_eventdetection_events(gr, rn)
 *     def get_eventdetection_events_params(self, gr=None, rn=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events_params()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_eventdetection_events_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":300
 *         else:
 *             return deref(self.thisptr).get_eventdetection_events_params(gr, rn)
 *     def get_eventdetection_events(self, gr=None, rn=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_53get_eventdetection_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_53get_eventdetection_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_v_rn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_eventdetection_events (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,&__pyx_n_s_rn,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rn);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_eventdetection_events") < 0)) __PYX_ERR(0, 300, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
    __pyx_v_rn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_eventdetection_events", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_eventdetection_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_52get_eventdetection_events(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr, __pyx_v_rn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_52get_eventdetection_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr, PyObject *__pyx_v_rn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_eventdetection_events", 0);

  /* "fast5.pyx":301
 *             return deref(self.thisptr).get_eventdetection_events_params(gr, rn)
 *     def get_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events()
 *         elif rn is None:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":302
 *     def get_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events()             # <<<<<<<<<<<<<<
 *         elif rn is None:
 *             return deref(self.thisptr).get_eventdetection_events(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event((*__pyx_v_self->thisptr).get_eventdetection_events()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":301
 *             return deref(self.thisptr).get_eventdetection_events_params(gr, rn)
 *     def get_eventdetection_events(self, gr=None, rn=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events()
 *         elif rn is None:
 */
  }

  /* "fast5.pyx":303
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events()
 *         elif rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events(gr)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_rn == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "fast5.pyx":304
 *             return deref(self.thisptr).get_eventdetection_events()
 *         elif rn is None:
 *             return deref(self.thisptr).get_eventdetection_events(gr)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_eventdetection_events(gr, rn)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event((*__pyx_v_self->thisptr).get_eventdetection_events(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":303
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events()
 *         elif rn is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_eventdetection_events(gr)
 *         else:
 */
  }

  /* "fast5.pyx":306
 *             return deref(self.thisptr).get_eventdetection_events(gr)
 *         else:
 *             return deref(self.thisptr).get_eventdetection_events(gr, rn)             # <<<<<<<<<<<<<<
 * 
 *     def get_basecall_group_list(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_rn); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event((*__pyx_v_self->thisptr).get_eventdetection_events(__pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":300
 *         else:
 *             return deref(self.thisptr).get_eventdetection_events_params(gr, rn)
 *     def get_eventdetection_events(self, gr=None, rn=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_eventdetection_events()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_eventdetection_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":308
 *             return deref(self.thisptr).get_eventdetection_events(gr, rn)
 * 
 *     def get_basecall_group_list(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_group_list()
 *     def get_basecall_strand_group_list(self, st):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_55get_basecall_group_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_55get_basecall_group_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_group_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_54get_basecall_group_list(((struct __pyx_obj_5fast5_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_54get_basecall_group_list(struct __pyx_obj_5fast5_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_basecall_group_list", 0);

  /* "fast5.pyx":309
 * 
 *     def get_basecall_group_list(self):
 *         return deref(self.thisptr).get_basecall_group_list()             # <<<<<<<<<<<<<<
 *     def get_basecall_strand_group_list(self, st):
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string((*__pyx_v_self->thisptr).get_basecall_group_list()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":308
 *             return deref(self.thisptr).get_eventdetection_events(gr, rn)
 * 
 *     def get_basecall_group_list(self):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_group_list()
 *     def get_basecall_strand_group_list(self, st):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fast5.File.get_basecall_group_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":310
 *     def get_basecall_group_list(self):
 *         return deref(self.thisptr).get_basecall_group_list()
 *     def get_basecall_strand_group_list(self, st):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 *     def have_basecall_group(self, gr=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_57get_basecall_strand_group_list(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_57get_basecall_strand_group_list(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_strand_group_list (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_56get_basecall_strand_group_list(((struct __pyx_obj_5fast5_File *)__pyx_v_self), ((PyObject *)__pyx_v_st));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_56get_basecall_strand_group_list(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_basecall_strand_group_list", 0);

  /* "fast5.pyx":311
 *         return deref(self.thisptr).get_basecall_group_list()
 *     def get_basecall_strand_group_list(self, st):
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)             # <<<<<<<<<<<<<<
 *     def have_basecall_group(self, gr=None):
 *         if gr is None:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string((*__pyx_v_self->thisptr).get_basecall_strand_group_list(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":310
 *     def get_basecall_group_list(self):
 *         return deref(self.thisptr).get_basecall_group_list()
 *     def get_basecall_strand_group_list(self, st):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 *     def have_basecall_group(self, gr=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fast5.File.get_basecall_strand_group_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":312
 *     def get_basecall_strand_group_list(self, st):
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 *     def have_basecall_group(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_group()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_59have_basecall_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_59have_basecall_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_group (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_group") < 0)) __PYX_ERR(0, 312, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_group", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 312, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_58have_basecall_group(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_58have_basecall_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("have_basecall_group", 0);

  /* "fast5.pyx":313
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 *     def have_basecall_group(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_group()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":314
 *     def have_basecall_group(self, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_group()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_group(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_group()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":313
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 *     def have_basecall_group(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_group()
 *         else:
 */
  }

  /* "fast5.pyx":316
 *             return deref(self.thisptr).have_basecall_group()
 *         else:
 *             return deref(self.thisptr).have_basecall_group(gr)             # <<<<<<<<<<<<<<
 *     def have_basecall_strand_group(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_group(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":312
 *     def get_basecall_strand_group_list(self, st):
 *         return deref(self.thisptr).get_basecall_strand_group_list(st)
 *     def have_basecall_group(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_group()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.have_basecall_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":317
 *         else:
 *             return deref(self.thisptr).have_basecall_group(gr)
 *     def have_basecall_strand_group(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_strand_group(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_61have_basecall_strand_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_61have_basecall_strand_group(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_strand_group (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_strand_group") < 0)) __PYX_ERR(0, 317, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_strand_group", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 317, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_strand_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_60have_basecall_strand_group(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_60have_basecall_strand_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("have_basecall_strand_group", 0);

  /* "fast5.pyx":318
 *             return deref(self.thisptr).have_basecall_group(gr)
 *     def have_basecall_strand_group(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_strand_group(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":319
 *     def have_basecall_strand_group(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_strand_group(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_strand_group(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_strand_group(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":318
 *             return deref(self.thisptr).have_basecall_group(gr)
 *     def have_basecall_strand_group(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_strand_group(st)
 *         else:
 */
  }

  /* "fast5.pyx":321
 *             return deref(self.thisptr).have_basecall_strand_group(st)
 *         else:
 *             return deref(self.thisptr).have_basecall_strand_group(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_1d_group(self, gr):
 *         return deref(self.thisptr).get_basecall_1d_group(gr)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_strand_group(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":317
 *         else:
 *             return deref(self.thisptr).have_basecall_group(gr)
 *     def have_basecall_strand_group(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_strand_group(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.have_basecall_strand_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":322
 *         else:
 *             return deref(self.thisptr).have_basecall_strand_group(st, gr)
 *     def get_basecall_1d_group(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_1d_group(gr)
 *     def get_basecall_eventdetection_group(self, gr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_63get_basecall_1d_group(PyObject *__pyx_v_self, PyObject *__pyx_v_gr); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_63get_basecall_1d_group(PyObject *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_1d_group (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_62get_basecall_1d_group(((struct __pyx_obj_5fast5_File *)__pyx_v_self), ((PyObject *)__pyx_v_gr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_62get_basecall_1d_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_basecall_1d_group", 0);

  /* "fast5.pyx":323
 *             return deref(self.thisptr).have_basecall_strand_group(st, gr)
 *     def get_basecall_1d_group(self, gr):
 *         return deref(self.thisptr).get_basecall_1d_group(gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_eventdetection_group(self, gr):
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_1d_group(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":322
 *         else:
 *             return deref(self.thisptr).have_basecall_strand_group(st, gr)
 *     def get_basecall_1d_group(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_1d_group(gr)
 *     def get_basecall_eventdetection_group(self, gr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fast5.File.get_basecall_1d_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":324
 *     def get_basecall_1d_group(self, gr):
 *         return deref(self.thisptr).get_basecall_1d_group(gr)
 *     def get_basecall_eventdetection_group(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)
 *     def get_basecall_params(self, gr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_65get_basecall_eventdetection_group(PyObject *__pyx_v_self, PyObject *__pyx_v_gr); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_65get_basecall_eventdetection_group(PyObject *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_eventdetection_group (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_64get_basecall_eventdetection_group(((struct __pyx_obj_5fast5_File *)__pyx_v_self), ((PyObject *)__pyx_v_gr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_64get_basecall_eventdetection_group(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_basecall_eventdetection_group", 0);

  /* "fast5.pyx":325
 *         return deref(self.thisptr).get_basecall_1d_group(gr)
 *     def get_basecall_eventdetection_group(self, gr):
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_params(self, gr):
 *         return deref(self.thisptr).get_basecall_params(gr)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_eventdetection_group(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":324
 *     def get_basecall_1d_group(self, gr):
 *         return deref(self.thisptr).get_basecall_1d_group(gr)
 *     def get_basecall_eventdetection_group(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)
 *     def get_basecall_params(self, gr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fast5.File.get_basecall_eventdetection_group", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":326
 *     def get_basecall_eventdetection_group(self, gr):
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)
 *     def get_basecall_params(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_params(gr)
 *     def get_basecall_log(self, gr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_67get_basecall_params(PyObject *__pyx_v_self, PyObject *__pyx_v_gr); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_67get_basecall_params(PyObject *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_params (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_66get_basecall_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self), ((PyObject *)__pyx_v_gr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_66get_basecall_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_basecall_params", 0);

  /* "fast5.pyx":327
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)
 *     def get_basecall_params(self, gr):
 *         return deref(self.thisptr).get_basecall_params(gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_log(self, gr):
 *         return deref(self.thisptr).get_basecall_log(gr)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string((*__pyx_v_self->thisptr).get_basecall_params(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":326
 *     def get_basecall_eventdetection_group(self, gr):
 *         return deref(self.thisptr).get_basecall_eventdetection_group(gr)
 *     def get_basecall_params(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_params(gr)
 *     def get_basecall_log(self, gr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fast5.File.get_basecall_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":328
 *     def get_basecall_params(self, gr):
 *         return deref(self.thisptr).get_basecall_params(gr)
 *     def get_basecall_log(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_log(gr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_69get_basecall_log(PyObject *__pyx_v_self, PyObject *__pyx_v_gr); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_69get_basecall_log(PyObject *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_log (wrapper)", 0);
  __pyx_r = __pyx_pf_5fast5_4File_68get_basecall_log(((struct __pyx_obj_5fast5_File *)__pyx_v_self), ((PyObject *)__pyx_v_gr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_68get_basecall_log(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_basecall_log", 0);

  /* "fast5.pyx":329
 *         return deref(self.thisptr).get_basecall_params(gr)
 *     def get_basecall_log(self, gr):
 *         return deref(self.thisptr).get_basecall_log(gr)             # <<<<<<<<<<<<<<
 * 
 *     def have_basecall_fastq(self, st, gr=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_log(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "fast5.pyx":328
 *     def get_basecall_params(self, gr):
 *         return deref(self.thisptr).get_basecall_params(gr)
 *     def get_basecall_log(self, gr):             # <<<<<<<<<<<<<<
 *         return deref(self.thisptr).get_basecall_log(gr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fast5.File.get_basecall_log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":331
 *         return deref(self.thisptr).get_basecall_log(gr)
 * 
 *     def have_basecall_fastq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_fastq(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_71have_basecall_fastq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_71have_basecall_fastq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_fastq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_fastq") < 0)) __PYX_ERR(0, 331, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_fastq", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 331, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_fastq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_70have_basecall_fastq(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_70have_basecall_fastq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("have_basecall_fastq", 0);

  /* "fast5.pyx":332
 * 
 *     def have_basecall_fastq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_fastq(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":333
 *     def have_basecall_fastq(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_fastq(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_fastq(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_fastq(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":332
 * 
 *     def have_basecall_fastq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_fastq(st)
 *         else:
 */
  }

  /* "fast5.pyx":335
 *             return deref(self.thisptr).have_basecall_fastq(st)
 *         else:
 *             return deref(self.thisptr).have_basecall_fastq(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_fastq(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_fastq(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":331
 *         return deref(self.thisptr).get_basecall_log(gr)
 * 
 *     def have_basecall_fastq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_fastq(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.have_basecall_fastq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":336
 *         else:
 *             return deref(self.thisptr).have_basecall_fastq(st, gr)
 *     def get_basecall_fastq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_fastq(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_73get_basecall_fastq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_73get_basecall_fastq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_fastq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_fastq") < 0)) __PYX_ERR(0, 336, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_fastq", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_fastq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_72get_basecall_fastq(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_72get_basecall_fastq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_fastq", 0);

  /* "fast5.pyx":337
 *             return deref(self.thisptr).have_basecall_fastq(st, gr)
 *     def get_basecall_fastq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_fastq(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":338
 *     def get_basecall_fastq(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_fastq(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_fastq(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_fastq(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":337
 *             return deref(self.thisptr).have_basecall_fastq(st, gr)
 *     def get_basecall_fastq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_fastq(st)
 *         else:
 */
  }

  /* "fast5.pyx":340
 *             return deref(self.thisptr).get_basecall_fastq(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_fastq(st, gr)             # <<<<<<<<<<<<<<
 *     def have_basecall_seq(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_fastq(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":336
 *         else:
 *             return deref(self.thisptr).have_basecall_fastq(st, gr)
 *     def get_basecall_fastq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_fastq(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_fastq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":341
 *         else:
 *             return deref(self.thisptr).get_basecall_fastq(st, gr)
 *     def have_basecall_seq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_seq(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_75have_basecall_seq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_75have_basecall_seq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_seq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_seq") < 0)) __PYX_ERR(0, 341, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_seq", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_seq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_74have_basecall_seq(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_74have_basecall_seq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("have_basecall_seq", 0);

  /* "fast5.pyx":342
 *             return deref(self.thisptr).get_basecall_fastq(st, gr)
 *     def have_basecall_seq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_seq(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":343
 *     def have_basecall_seq(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_seq(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_seq(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_seq(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":342
 *             return deref(self.thisptr).get_basecall_fastq(st, gr)
 *     def have_basecall_seq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_seq(st)
 *         else:
 */
  }

  /* "fast5.pyx":345
 *             return deref(self.thisptr).have_basecall_seq(st)
 *         else:
 *             return deref(self.thisptr).have_basecall_seq(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_seq(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_seq(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":341
 *         else:
 *             return deref(self.thisptr).get_basecall_fastq(st, gr)
 *     def have_basecall_seq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_seq(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.have_basecall_seq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":346
 *         else:
 *             return deref(self.thisptr).have_basecall_seq(st, gr)
 *     def get_basecall_seq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_seq(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_77get_basecall_seq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_77get_basecall_seq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_seq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_seq") < 0)) __PYX_ERR(0, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_seq", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_seq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_76get_basecall_seq(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_76get_basecall_seq(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_seq", 0);

  /* "fast5.pyx":347
 *             return deref(self.thisptr).have_basecall_seq(st, gr)
 *     def get_basecall_seq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_seq(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":348
 *     def get_basecall_seq(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_seq(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_seq(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_seq(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":347
 *             return deref(self.thisptr).have_basecall_seq(st, gr)
 *     def get_basecall_seq(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_seq(st)
 *         else:
 */
  }

  /* "fast5.pyx":350
 *             return deref(self.thisptr).get_basecall_seq(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_seq(st, gr)             # <<<<<<<<<<<<<<
 * 
 *     def have_basecall_model(self, st, gr=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_seq(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":346
 *         else:
 *             return deref(self.thisptr).have_basecall_seq(st, gr)
 *     def get_basecall_seq(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_seq(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_seq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":352
 *             return deref(self.thisptr).get_basecall_seq(st, gr)
 * 
 *     def have_basecall_model(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_model(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_79have_basecall_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_79have_basecall_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_model") < 0)) __PYX_ERR(0, 352, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_model", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_78have_basecall_model(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_78have_basecall_model(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("have_basecall_model", 0);

  /* "fast5.pyx":353
 * 
 *     def have_basecall_model(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_model(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":354
 *     def have_basecall_model(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_model(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_model(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_model(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":353
 * 
 *     def have_basecall_model(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_model(st)
 *         else:
 */
  }

  /* "fast5.pyx":356
 *             return deref(self.thisptr).have_basecall_model(st)
 *         else:
 *             return deref(self.thisptr).have_basecall_model(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_model_file(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_model(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":352
 *             return deref(self.thisptr).get_basecall_seq(st, gr)
 * 
 *     def have_basecall_model(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_model(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.have_basecall_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":357
 *         else:
 *             return deref(self.thisptr).have_basecall_model(st, gr)
 *     def get_basecall_model_file(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model_file(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_81get_basecall_model_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_81get_basecall_model_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_model_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_model_file") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_model_file", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_model_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_80get_basecall_model_file(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_80get_basecall_model_file(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_model_file", 0);

  /* "fast5.pyx":358
 *             return deref(self.thisptr).have_basecall_model(st, gr)
 *     def get_basecall_model_file(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_model_file(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":359
 *     def get_basecall_model_file(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model_file(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_model_file(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 359, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_model_file(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":358
 *             return deref(self.thisptr).have_basecall_model(st, gr)
 *     def get_basecall_model_file(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_model_file(st)
 *         else:
 */
  }

  /* "fast5.pyx":361
 *             return deref(self.thisptr).get_basecall_model_file(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_model_file(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_model_params(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->thisptr).get_basecall_model_file(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":357
 *         else:
 *             return deref(self.thisptr).have_basecall_model(st, gr)
 *     def get_basecall_model_file(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model_file(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_model_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":362
 *         else:
 *             return deref(self.thisptr).get_basecall_model_file(st, gr)
 *     def get_basecall_model_params(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model_params(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_83get_basecall_model_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_83get_basecall_model_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_model_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_model_params") < 0)) __PYX_ERR(0, 362, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_model_params", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 362, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_model_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_82get_basecall_model_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_82get_basecall_model_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_model_params", 0);

  /* "fast5.pyx":363
 *             return deref(self.thisptr).get_basecall_model_file(st, gr)
 *     def get_basecall_model_params(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_model_params(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":364
 *     def get_basecall_model_params(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model_params(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_model_params(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_Params((*__pyx_v_self->thisptr).get_basecall_model_params(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":363
 *             return deref(self.thisptr).get_basecall_model_file(st, gr)
 *     def get_basecall_model_params(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_model_params(st)
 *         else:
 */
  }

  /* "fast5.pyx":366
 *             return deref(self.thisptr).get_basecall_model_params(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_model_params(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_model(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_Params((*__pyx_v_self->thisptr).get_basecall_model_params(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":362
 *         else:
 *             return deref(self.thisptr).get_basecall_model_file(st, gr)
 *     def get_basecall_model_params(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model_params(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_model_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":367
 *         else:
 *             return deref(self.thisptr).get_basecall_model_params(st, gr)
 *     def get_basecall_model(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_85get_basecall_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_85get_basecall_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_model") < 0)) __PYX_ERR(0, 367, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_model", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 367, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_84get_basecall_model(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_84get_basecall_model(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_model", 0);

  /* "fast5.pyx":368
 *             return deref(self.thisptr).get_basecall_model_params(st, gr)
 *     def get_basecall_model(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_model(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":369
 *     def get_basecall_model(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_model(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 369, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State((*__pyx_v_self->thisptr).get_basecall_model(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":368
 *             return deref(self.thisptr).get_basecall_model_params(st, gr)
 *     def get_basecall_model(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_model(st)
 *         else:
 */
  }

  /* "fast5.pyx":371
 *             return deref(self.thisptr).get_basecall_model(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_model(st, gr)             # <<<<<<<<<<<<<<
 * 
 *     def have_basecall_events(self, st, gr=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State((*__pyx_v_self->thisptr).get_basecall_model(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":367
 *         else:
 *             return deref(self.thisptr).get_basecall_model_params(st, gr)
 *     def get_basecall_model(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_model(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":373
 *             return deref(self.thisptr).get_basecall_model(st, gr)
 * 
 *     def have_basecall_events(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_events(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_87have_basecall_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_87have_basecall_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_events (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_events") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_events", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_86have_basecall_events(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_86have_basecall_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("have_basecall_events", 0);

  /* "fast5.pyx":374
 * 
 *     def have_basecall_events(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_events(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":375
 *     def have_basecall_events(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_events(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_events(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_events(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":374
 * 
 *     def have_basecall_events(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_events(st)
 *         else:
 */
  }

  /* "fast5.pyx":377
 *             return deref(self.thisptr).have_basecall_events(st)
 *         else:
 *             return deref(self.thisptr).have_basecall_events(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_events_params(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_events(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":373
 *             return deref(self.thisptr).get_basecall_model(st, gr)
 * 
 *     def have_basecall_events(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_events(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.have_basecall_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":378
 *         else:
 *             return deref(self.thisptr).have_basecall_events(st, gr)
 *     def get_basecall_events_params(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_events_params(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_89get_basecall_events_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_89get_basecall_events_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_events_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_events_params") < 0)) __PYX_ERR(0, 378, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_events_params", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 378, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_events_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_88get_basecall_events_params(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_88get_basecall_events_params(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_events_params", 0);

  /* "fast5.pyx":379
 *             return deref(self.thisptr).have_basecall_events(st, gr)
 *     def get_basecall_events_params(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_events_params(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":380
 *     def get_basecall_events_params(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_events_params(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_events_params(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Events_Params((*__pyx_v_self->thisptr).get_basecall_events_params(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":379
 *             return deref(self.thisptr).have_basecall_events(st, gr)
 *     def get_basecall_events_params(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_events_params(st)
 *         else:
 */
  }

  /* "fast5.pyx":382
 *             return deref(self.thisptr).get_basecall_events_params(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_events_params(st, gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_events(self, st, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Events_Params((*__pyx_v_self->thisptr).get_basecall_events_params(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":378
 *         else:
 *             return deref(self.thisptr).have_basecall_events(st, gr)
 *     def get_basecall_events_params(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_events_params(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_events_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":383
 *         else:
 *             return deref(self.thisptr).get_basecall_events_params(st, gr)
 *     def get_basecall_events(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_events(st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_91get_basecall_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_91get_basecall_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_events (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_st,&__pyx_n_s_gr,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_events") < 0)) __PYX_ERR(0, 383, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_st = values[0];
    __pyx_v_gr = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_events", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 383, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_90get_basecall_events(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_st, __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_90get_basecall_events(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_st, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("get_basecall_events", 0);

  /* "fast5.pyx":384
 *             return deref(self.thisptr).get_basecall_events_params(st, gr)
 *     def get_basecall_events(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_events(st)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":385
 *     def get_basecall_events(self, st, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_events(st)             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_events(st, gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event((*__pyx_v_self->thisptr).get_basecall_events(__pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":384
 *             return deref(self.thisptr).get_basecall_events_params(st, gr)
 *     def get_basecall_events(self, st, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_events(st)
 *         else:
 */
  }

  /* "fast5.pyx":387
 *             return deref(self.thisptr).get_basecall_events(st)
 *         else:
 *             return deref(self.thisptr).get_basecall_events(st, gr)             # <<<<<<<<<<<<<<
 * 
 *     def have_basecall_alignment(self, gr=None):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_st); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 387, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 387, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event((*__pyx_v_self->thisptr).get_basecall_events(__pyx_t_3, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":383
 *         else:
 *             return deref(self.thisptr).get_basecall_events_params(st, gr)
 *     def get_basecall_events(self, st, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_events(st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("fast5.File.get_basecall_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":389
 *             return deref(self.thisptr).get_basecall_events(st, gr)
 * 
 *     def have_basecall_alignment(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_alignment()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_93have_basecall_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_93have_basecall_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("have_basecall_alignment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "have_basecall_alignment") < 0)) __PYX_ERR(0, 389, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("have_basecall_alignment", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 389, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.have_basecall_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_92have_basecall_alignment(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_92have_basecall_alignment(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("have_basecall_alignment", 0);

  /* "fast5.pyx":390
 * 
 *     def have_basecall_alignment(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_alignment()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":391
 *     def have_basecall_alignment(self, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_alignment()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).have_basecall_alignment(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_alignment()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":390
 * 
 *     def have_basecall_alignment(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).have_basecall_alignment()
 *         else:
 */
  }

  /* "fast5.pyx":393
 *             return deref(self.thisptr).have_basecall_alignment()
 *         else:
 *             return deref(self.thisptr).have_basecall_alignment(gr)             # <<<<<<<<<<<<<<
 *     def get_basecall_alignment(self, gr=None):
 *         if gr is None:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyBool_FromLong((*__pyx_v_self->thisptr).have_basecall_alignment(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":389
 *             return deref(self.thisptr).get_basecall_events(st, gr)
 * 
 *     def have_basecall_alignment(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).have_basecall_alignment()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.have_basecall_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fast5.pyx":394
 *         else:
 *             return deref(self.thisptr).have_basecall_alignment(gr)
 *     def get_basecall_alignment(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_alignment()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5fast5_4File_95get_basecall_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5fast5_4File_95get_basecall_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gr = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basecall_alignment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gr,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_basecall_alignment") < 0)) __PYX_ERR(0, 394, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gr = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_basecall_alignment", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 394, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fast5.File.get_basecall_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5fast5_4File_94get_basecall_alignment(((struct __pyx_obj_5fast5_File *)__pyx_v_self), __pyx_v_gr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5fast5_4File_94get_basecall_alignment(struct __pyx_obj_5fast5_File *__pyx_v_self, PyObject *__pyx_v_gr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("get_basecall_alignment", 0);

  /* "fast5.pyx":395
 *             return deref(self.thisptr).have_basecall_alignment(gr)
 *     def get_basecall_alignment(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_alignment()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_gr == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fast5.pyx":396
 *     def get_basecall_alignment(self, gr=None):
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_alignment()             # <<<<<<<<<<<<<<
 *         else:
 *             return deref(self.thisptr).get_basecall_alignment(gr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry((*__pyx_v_self->thisptr).get_basecall_alignment()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fast5.pyx":395
 *             return deref(self.thisptr).have_basecall_alignment(gr)
 *     def get_basecall_alignment(self, gr=None):
 *         if gr is None:             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).get_basecall_alignment()
 *         else:
 */
  }

  /* "fast5.pyx":398
 *             return deref(self.thisptr).get_basecall_alignment()
 *         else:
 *             return deref(self.thisptr).get_basecall_alignment(gr)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_gr); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
    __pyx_t_3 = __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry((*__pyx_v_self->thisptr).get_basecall_alignment(__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "fast5.pyx":394
 *         else:
 *             return deref(self.thisptr).have_basecall_alignment(gr)
 *     def get_basecall_alignment(self, gr=None):             # <<<<<<<<<<<<<<
 *         if gr is None:
 *             return deref(self.thisptr).get_basecall_alignment()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fast5.File.get_basecall_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(std::map<std::string,std::string>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::string,std::string> ::value_type const *__pyx_v_key_value;
  std::map<std::string,std::string> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample(const std::vector<fast5::Raw_Int_Sample>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample")
 * cdef object __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int16_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample")
 * cdef object __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Int_Sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample(const std::vector<fast5::Raw_Sample>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample")
 * cdef object __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample")
 * cdef object __pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_fast5_3a__3a_Raw_Sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event(const std::vector<struct fast5::EventDetection_Event>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Event((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct__fast5_3a__3a_EventDetection_Event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State(const std::vector<struct fast5::Basecall_Model_State>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_State((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Model_State", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event(const std::vector<struct fast5::Basecall_Event>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Event((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(const std::vector<struct fast5::Basecall_Alignment_Entry>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5fast5_File(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5fast5_File *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5fast5_File *)o);
  new((void*)&(p->thisptr)) std::unique_ptr<fast5::File> ();
  return o;
}

static void __pyx_tp_dealloc_5fast5_File(PyObject *o) {
  struct __pyx_obj_5fast5_File *p = (struct __pyx_obj_5fast5_File *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->thisptr);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5fast5_File[] = {
  {"is_open", (PyCFunction)__pyx_pw_5fast5_4File_3is_open, METH_NOARGS, 0},
  {"is_rw", (PyCFunction)__pyx_pw_5fast5_4File_5is_rw, METH_NOARGS, 0},
  {"file_name", (PyCFunction)__pyx_pw_5fast5_4File_7file_name, METH_NOARGS, 0},
  {"open", (PyCFunction)__pyx_pw_5fast5_4File_9open, METH_VARARGS|METH_KEYWORDS, 0},
  {"create", (PyCFunction)__pyx_pw_5fast5_4File_11create, METH_VARARGS|METH_KEYWORDS, 0},
  {"close", (PyCFunction)__pyx_pw_5fast5_4File_13close, METH_NOARGS, 0},
  {"is_valid_file", (PyCFunction)__pyx_pw_5fast5_4File_15is_valid_file, METH_VARARGS|METH_KEYWORDS, 0},
  {"file_version", (PyCFunction)__pyx_pw_5fast5_4File_17file_version, METH_NOARGS, 0},
  {"have_channel_id_params", (PyCFunction)__pyx_pw_5fast5_4File_19have_channel_id_params, METH_NOARGS, 0},
  {"get_channel_id_params", (PyCFunction)__pyx_pw_5fast5_4File_21get_channel_id_params, METH_NOARGS, 0},
  {"have_tracking_id_params", (PyCFunction)__pyx_pw_5fast5_4File_23have_tracking_id_params, METH_NOARGS, 0},
  {"get_tracking_id_params", (PyCFunction)__pyx_pw_5fast5_4File_25get_tracking_id_params, METH_NOARGS, 0},
  {"have_sequences_params", (PyCFunction)__pyx_pw_5fast5_4File_27have_sequences_params, METH_NOARGS, 0},
  {"get_sequences_params", (PyCFunction)__pyx_pw_5fast5_4File_29get_sequences_params, METH_NOARGS, 0},
  {"get_raw_samples_read_name_list", (PyCFunction)__pyx_pw_5fast5_4File_31get_raw_samples_read_name_list, METH_NOARGS, 0},
  {"have_raw_samples", (PyCFunction)__pyx_pw_5fast5_4File_33have_raw_samples, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_raw_samples_params", (PyCFunction)__pyx_pw_5fast5_4File_35get_raw_samples_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_raw_int_samples", (PyCFunction)__pyx_pw_5fast5_4File_37get_raw_int_samples, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_raw_samples", (PyCFunction)__pyx_pw_5fast5_4File_39get_raw_samples, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_eventdetection_group_list", (PyCFunction)__pyx_pw_5fast5_4File_41get_eventdetection_group_list, METH_NOARGS, 0},
  {"have_eventdetection_group", (PyCFunction)__pyx_pw_5fast5_4File_43have_eventdetection_group, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_eventdetection_params", (PyCFunction)__pyx_pw_5fast5_4File_45get_eventdetection_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_eventdetection_read_name_list", (PyCFunction)__pyx_pw_5fast5_4File_47get_eventdetection_read_name_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"have_eventdetection_events", (PyCFunction)__pyx_pw_5fast5_4File_49have_eventdetection_events, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_eventdetection_events_params", (PyCFunction)__pyx_pw_5fast5_4File_51get_eventdetection_events_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_eventdetection_events", (PyCFunction)__pyx_pw_5fast5_4File_53get_eventdetection_events, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_group_list", (PyCFunction)__pyx_pw_5fast5_4File_55get_basecall_group_list, METH_NOARGS, 0},
  {"get_basecall_strand_group_list", (PyCFunction)__pyx_pw_5fast5_4File_57get_basecall_strand_group_list, METH_O, 0},
  {"have_basecall_group", (PyCFunction)__pyx_pw_5fast5_4File_59have_basecall_group, METH_VARARGS|METH_KEYWORDS, 0},
  {"have_basecall_strand_group", (PyCFunction)__pyx_pw_5fast5_4File_61have_basecall_strand_group, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_1d_group", (PyCFunction)__pyx_pw_5fast5_4File_63get_basecall_1d_group, METH_O, 0},
  {"get_basecall_eventdetection_group", (PyCFunction)__pyx_pw_5fast5_4File_65get_basecall_eventdetection_group, METH_O, 0},
  {"get_basecall_params", (PyCFunction)__pyx_pw_5fast5_4File_67get_basecall_params, METH_O, 0},
  {"get_basecall_log", (PyCFunction)__pyx_pw_5fast5_4File_69get_basecall_log, METH_O, 0},
  {"have_basecall_fastq", (PyCFunction)__pyx_pw_5fast5_4File_71have_basecall_fastq, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_fastq", (PyCFunction)__pyx_pw_5fast5_4File_73get_basecall_fastq, METH_VARARGS|METH_KEYWORDS, 0},
  {"have_basecall_seq", (PyCFunction)__pyx_pw_5fast5_4File_75have_basecall_seq, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_seq", (PyCFunction)__pyx_pw_5fast5_4File_77get_basecall_seq, METH_VARARGS|METH_KEYWORDS, 0},
  {"have_basecall_model", (PyCFunction)__pyx_pw_5fast5_4File_79have_basecall_model, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_model_file", (PyCFunction)__pyx_pw_5fast5_4File_81get_basecall_model_file, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_model_params", (PyCFunction)__pyx_pw_5fast5_4File_83get_basecall_model_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_model", (PyCFunction)__pyx_pw_5fast5_4File_85get_basecall_model, METH_VARARGS|METH_KEYWORDS, 0},
  {"have_basecall_events", (PyCFunction)__pyx_pw_5fast5_4File_87have_basecall_events, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_events_params", (PyCFunction)__pyx_pw_5fast5_4File_89get_basecall_events_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_events", (PyCFunction)__pyx_pw_5fast5_4File_91get_basecall_events, METH_VARARGS|METH_KEYWORDS, 0},
  {"have_basecall_alignment", (PyCFunction)__pyx_pw_5fast5_4File_93have_basecall_alignment, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_basecall_alignment", (PyCFunction)__pyx_pw_5fast5_4File_95get_basecall_alignment, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5fast5_File = {
  PyVarObject_HEAD_INIT(0, 0)
  "fast5.File", /*tp_name*/
  sizeof(struct __pyx_obj_5fast5_File), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5fast5_File, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5fast5_File, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5fast5_4File_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5fast5_File, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "fast5",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_abasic_found, __pyx_k_abasic_found, sizeof(__pyx_k_abasic_found), 0, 0, 1, 1},
  {&__pyx_n_s_channel_number, __pyx_k_channel_number, sizeof(__pyx_k_channel_number), 0, 0, 1, 1},
  {&__pyx_n_s_complement_index, __pyx_k_complement_index, sizeof(__pyx_k_complement_index), 0, 0, 1, 1},
  {&__pyx_n_s_digitisation, __pyx_k_digitisation, sizeof(__pyx_k_digitisation), 0, 0, 1, 1},
  {&__pyx_n_s_drift, __pyx_k_drift, sizeof(__pyx_k_drift), 0, 0, 1, 1},
  {&__pyx_n_s_duration, __pyx_k_duration, sizeof(__pyx_k_duration), 0, 0, 1, 1},
  {&__pyx_n_s_fast5, __pyx_k_fast5, sizeof(__pyx_k_fast5), 0, 0, 1, 1},
  {&__pyx_n_s_file_name, __pyx_k_file_name, sizeof(__pyx_k_file_name), 0, 0, 1, 1},
  {&__pyx_n_s_gr, __pyx_k_gr, sizeof(__pyx_k_gr), 0, 0, 1, 1},
  {&__pyx_kp_s_home_matei_code_fast5_cython_fa, __pyx_k_home_matei_code_fast5_cython_fa, sizeof(__pyx_k_home_matei_code_fast5_cython_fa), 0, 0, 1, 0},
  {&__pyx_n_s_is_valid_file, __pyx_k_is_valid_file, sizeof(__pyx_k_is_valid_file), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_level_mean, __pyx_k_level_mean, sizeof(__pyx_k_level_mean), 0, 0, 1, 1},
  {&__pyx_n_s_level_stdv, __pyx_k_level_stdv, sizeof(__pyx_k_level_stdv), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_median_before, __pyx_k_median_before, sizeof(__pyx_k_median_before), 0, 0, 1, 1},
  {&__pyx_n_s_move, __pyx_k_move, sizeof(__pyx_k_move), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_n_s_p_A, __pyx_k_p_A, sizeof(__pyx_k_p_A), 0, 0, 1, 1},
  {&__pyx_n_s_p_C, __pyx_k_p_C, sizeof(__pyx_k_p_C), 0, 0, 1, 1},
  {&__pyx_n_s_p_G, __pyx_k_p_G, sizeof(__pyx_k_p_G), 0, 0, 1, 1},
  {&__pyx_n_s_p_T, __pyx_k_p_T, sizeof(__pyx_k_p_T), 0, 0, 1, 1},
  {&__pyx_n_s_p_model_state, __pyx_k_p_model_state, sizeof(__pyx_k_p_model_state), 0, 0, 1, 1},
  {&__pyx_n_s_p_mp_state, __pyx_k_p_mp_state, sizeof(__pyx_k_p_mp_state), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_id, __pyx_k_read_id, sizeof(__pyx_k_read_id), 0, 0, 1, 1},
  {&__pyx_n_s_read_number, __pyx_k_read_number, sizeof(__pyx_k_read_number), 0, 0, 1, 1},
  {&__pyx_n_s_rn, __pyx_k_rn, sizeof(__pyx_k_rn), 0, 0, 1, 1},
  {&__pyx_n_s_rw, __pyx_k_rw, sizeof(__pyx_k_rw), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_sampling_rate, __pyx_k_sampling_rate, sizeof(__pyx_k_sampling_rate), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_scale_sd, __pyx_k_scale_sd, sizeof(__pyx_k_scale_sd), 0, 0, 1, 1},
  {&__pyx_n_s_scaling_used, __pyx_k_scaling_used, sizeof(__pyx_k_scaling_used), 0, 0, 1, 1},
  {&__pyx_n_s_sd_mean, __pyx_k_sd_mean, sizeof(__pyx_k_sd_mean), 0, 0, 1, 1},
  {&__pyx_n_s_sd_stdv, __pyx_k_sd_stdv, sizeof(__pyx_k_sd_stdv), 0, 0, 1, 1},
  {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_mux, __pyx_k_start_mux, sizeof(__pyx_k_start_mux), 0, 0, 1, 1},
  {&__pyx_n_s_start_time, __pyx_k_start_time, sizeof(__pyx_k_start_time), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_stdv, __pyx_k_stdv, sizeof(__pyx_k_stdv), 0, 0, 1, 1},
  {&__pyx_n_s_template_index, __pyx_k_template_index, sizeof(__pyx_k_template_index), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_trunc, __pyx_k_trunc, sizeof(__pyx_k_trunc), 0, 0, 1, 1},
  {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
  {&__pyx_n_s_var_sd, __pyx_k_var_sd, sizeof(__pyx_k_var_sd), 0, 0, 1, 1},
  {&__pyx_n_s_variant, __pyx_k_variant, sizeof(__pyx_k_variant), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "fast5.pyx":225
 *         return deref(self.thisptr).close()
 *     @staticmethod
 *     def is_valid_file(s):             # <<<<<<<<<<<<<<
 *         return File.is_valid_file(s)
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_s); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_matei_code_fast5_cython_fa, __pyx_n_s_is_valid_file, 225, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initfast5(void); /*proto*/
PyMODINIT_FUNC initfast5(void)
#else
PyMODINIT_FUNC PyInit_fast5(void); /*proto*/
PyMODINIT_FUNC PyInit_fast5(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_fast5(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("fast5", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_fast5) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "fast5")) {
      if (unlikely(PyDict_SetItemString(modules, "fast5", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5fast5_File) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_type_5fast5_File.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "File", (PyObject *)&__pyx_type_5fast5_File) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_ptype_5fast5_File = &__pyx_type_5fast5_File;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "fast5.pyx":193
 *         vector[Basecall_Alignment_Entry] get_basecall_alignment(string)
 * 
 * __version__ = cpp_version             # <<<<<<<<<<<<<<
 * 
 * cdef class File:
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(fast5::version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fast5.pyx":225
 *         return deref(self.thisptr).close()
 *     @staticmethod
 *     def is_valid_file(s):             # <<<<<<<<<<<<<<
 *         return File.is_valid_file(s)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5fast5_4File_15is_valid_file, NULL, __pyx_n_s_fast5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "fast5.pyx":224
 *     def close(self):
 *         return deref(self.thisptr).close()
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def is_valid_file(s):
 *         return File.is_valid_file(s)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5fast5_File->tp_dict, __pyx_n_s_is_valid_file, __pyx_t_1) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5fast5_File);

  /* "fast5.pyx":225
 *         return deref(self.thisptr).close()
 *     @staticmethod
 *     def is_valid_file(s):             # <<<<<<<<<<<<<<
 *         return File.is_valid_file(s)
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_5fast5_File, __pyx_n_s_is_valid_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "fast5.pyx":224
 *     def close(self):
 *         return deref(self.thisptr).close()
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def is_valid_file(s):
 *         return File.is_valid_file(s)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_5fast5_File->tp_dict, __pyx_n_s_is_valid_file, __pyx_t_1) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_5fast5_File);

  /* "fast5.pyx":1
 * from cython.operator cimport dereference as deref             # <<<<<<<<<<<<<<
 * 
 * from libc.stdint cimport int16_t
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry")
 * cdef object __pyx_convert_vector_to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init fast5", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init fast5");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* GetNameInClass */
    static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Channel_Id_Params(struct fast5::Channel_Id_Params s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = __pyx_convert_PyObject_string_to_py_std__in_string(s.channel_number); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_channel_number, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.digitisation); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_digitisation, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.offset); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_offset, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.range); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_range, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.sampling_rate); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_sampling_rate, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    /* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Raw_Samples_Params(struct fast5::Raw_Samples_Params s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = __pyx_convert_PyObject_string_to_py_std__in_string(s.read_id); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_read_id, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.read_number); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_read_number, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.start_mux); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start_mux, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.start_time); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start_time, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.duration); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_duration, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    /* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int16_t(int16_t value) {
    const int16_t neg_one = (int16_t) -1, const_zero = (int16_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int16_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int16_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int16_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Events_Params(struct fast5::EventDetection_Events_Params s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = __pyx_convert_PyObject_string_to_py_std__in_string(s.read_id); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_read_id, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.read_number); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_read_number, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.scaling_used); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_scaling_used, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.start_mux); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start_mux, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.start_time); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start_time, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.duration); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_duration, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.median_before); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_median_before, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_unsigned_int(s.abasic_found); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_abasic_found, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_EventDetection_Event(struct fast5::EventDetection_Event s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = PyFloat_FromDouble(s.mean); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_mean, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.stdv); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_stdv, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.start); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.length); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_length, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    /* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_Params(struct fast5::Basecall_Model_Params s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = PyFloat_FromDouble(s.scale); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_scale, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.shift); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_shift, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.drift); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_drift, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.var); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_var, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.scale_sd); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_scale_sd, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.var_sd); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_var_sd, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Model_State(struct fast5::Basecall_Model_State s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.variant); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_variant, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.level_mean); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_level_mean, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.level_stdv); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_level_stdv, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.sd_mean); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_sd_mean, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.sd_stdv); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_sd_stdv, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.weight); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_weight, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Events_Params(struct fast5::Basecall_Events_Params s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = PyFloat_FromDouble(s.start_time); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start_time, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.duration); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_duration, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Event(struct fast5::Basecall_Event s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = PyFloat_FromDouble(s.mean); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_mean, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.stdv); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_stdv, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.start); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_start, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.length); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_length, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.p_model_state); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_p_model_state, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.p_mp_state); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_p_mp_state, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.p_A); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_p_A, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.p_C); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_p_C, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.p_G); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_p_G, member) < 0)) goto bad;
      Py_DECREF(member);
      member = PyFloat_FromDouble(s.p_T); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_p_T, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.move); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_move, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    static PyObject* __pyx_convert__to_py_struct__fast5_3a__3a_Basecall_Alignment_Entry(struct fast5::Basecall_Alignment_Entry s) {
      PyObject* res;
      PyObject* member;
      res = PyDict_New(); if (unlikely(!res)) return NULL;
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.template_index); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_template_index, member) < 0)) goto bad;
      Py_DECREF(member);
      member = __Pyx_PyInt_From_PY_LONG_LONG(s.complement_index); if (unlikely(!member)) goto bad;
      if (unlikely(PyDict_SetItem(res, __pyx_n_s_complement_index, member) < 0)) goto bad;
      Py_DECREF(member);
      return res;
      bad:
      Py_XDECREF(member);
      Py_DECREF(res);
      return NULL;
    }
    /* CIntFromPy */
    static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
